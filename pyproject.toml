[tool.poetry]
name = "structlog-sentry-logger"
version = "0.17.5"
description = "Log without the setup via a pre-configured structlog logger with optional Sentry integration"
authors = ["Teo Zosa <erinzosa@ucla.com>"]
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/TeoZosa/structlog-sentry-logger"
homepage = "https://github.com/TeoZosa/structlog-sentry-logger"
include = ["structlog_sentry_logger/py.typed"]
keywords = ["logging", "structured", "structure", "log", "structured logging", "sentry", "structlog", "structlog-sentry"]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.build]
script = "build.py"
generate-setup-file = true

[tool.poetry.urls]
Changelog = "https://github.com/TeoZosa/structlog-sentry-logger/releases"

[tool.poetry.dependencies]
python = "^3.7,<3.11"

# Project-Specific
colorama = "^0.4.3"
gitpython = "^3.1.7"
orjson = "^3.6.4"
python-dotenv = ">=0.19"
rich = ">=10.12,<13.0"
sentry-sdk = ">0.17.0"
structlog = ">=21.1,<23.0"

[tool.poetry.dev-dependencies]
# Standardized Developer Workflow Orchestration
cruft = "^2.11.1" # Automated Cookiecutter template synchronization

# Type Checking and Data Validation
mypy = "^0.982" # Static type checker (includes Mypyc Python module to C-Extension compiler, enabled by standard Python type annotations)
typeguard = "^2.13.3" # Runtime type checker; Note: Mypyc-compiled C-extensions also perform runtime type checking.

# Testing
pytest = "^7.2.0"
pytest-benchmark = {extras = ["histogram"], version = "^4.0.0"}
pytest-cov = "^4.0.0"
pytest-emoji = "^0.2.0"
pytest-mock = "^3.10.0"
pytest-sugar = "^0.9.6"
pytest-xdist = "^2.5.0"
mutmut = "^2.4.2"
xdoctest = {extras = ["all"], version = "^1.1.0"}
tox = "^3.27.0"
tox-wheel = "^1.0.0"

# Linting
## Code formatting
black = "^22.10" # see: https://black.readthedocs.io/en/stable/editor_integration.html
## Code quality
pylint = "^2.13.9"
## Automation and management
pre-commit = "^2.20.0"

# CI/CD
tox-gh-actions = "^2.10.0"

# Documentation
darglint = "^1.5.8"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
emoji = ">=1.6.1,<3.0.0"
importlib-metadata = ">=3.4.0"
myst-parser = ">=0.15,<0.19"
pygments = "^2.9.0"
sphinx = ">=4.1.2,<6.0.0"
sphinx-autoapi = "^1.8.1"
sphinx-rtd-theme = ">=0.5.1,<1.1.0"
sphinxcontrib-confluencebuilder = "^1.5.0"
types-emoji = ">=1.2.4,<3.0.0" # PEP 561 compliant stub packages for mypy

#################################################################################
# Tooling configs                                                               #
#################################################################################
[tool.coverage.run]
branch = true
concurrency = ["multiprocessing"]
parallel = true
source = ["structlog_sentry_logger"]

[tool.coverage.report]
exclude_lines =[
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
fail_under = 100
omit =[
    "structlog_sentry_logger/structlog_sentry.py",
]
show_missing = true
skip_covered = true

[tool.cruft]
skip = [
    ".env",
    ".python-version",
    "structlog_sentry_logger/__init__.py",
    "docs/source/.env",
]

[tool.flakeheaven]
# specify any flake8 options
exclude = [".*"] # Ignore dotfiles
# make output nice
format = "grouped"
# show line of source code in output
show_source = true

# list of plugins and rules for them
[tool.flakeheaven.plugins]
# cyclomatic complexity (https://github.com/PyCQA/mccabe)
mccabe = ["+*"]
# include everything in pyflakes except F401
pyflakes = ["+*", "-F401"]
# include everything in pycodestyle except what Black covers
pycodestyle = ["+*",
    "-E203", # Whitespace before ":"
    "-E501", # Line too long (82 > 78 characters)
    "-W503"  # Line break occurred before a binary operator <- this is now considered best practice by PEP 8
]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
fail-under = 0 # adjust `fail-under` value as quality standards permit
whitelist-regex = []
color = true

[tool.isort]
profile = "black"
atomic = true
combine_as_imports = true

[tool.mypy]
disallow_untyped_defs = true
files = "**/*.py"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_context = true
show_error_codes = true

[tool.pylint.basic]
extension-pkg-allow-list = ["orjson"]
good-names = [
    # default `pylint` values
    "i", "j", "k", "ex", "Run", "_",
    # project-added values
    "v"
]
good-names-rgxs = ["^Test_.*$", "^.*DSN.*$"]

[tool.pylint.messages_control]
disable = [
  # Explicitly document only as needed
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  # Black & Flake8 purview
  "line-too-long",
  "c-extension-no-member",
]

[tool.pylint.similarities]
# Ignore imports when computing similarities.
ignore-imports = "yes"
min-similarity-lines = 5

[tool.pytest.ini_options]
addopts = ["-rfsxX", "-l", "--tb=short", "--strict-markers", "-vv", "--forked", "--emoji", "--xdoctest"]
xfail_strict = true
testpaths = ["tests",]
norecursedirs = [".*", "*.egg", "build", "dist",]

[build-system]
requires = ["poetry-core>=1.0.0", "mypy>=0.910", "setuptools>=58.1.0", "orjson>=3.6.4"]
build-backend = "poetry.core.masonry.api"
