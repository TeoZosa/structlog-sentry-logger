[tool.poetry]
name = "structlog-sentry-logger"
version = "0.20.1"
description = "Log without the setup via a pre-configured structlog logger with optional Sentry integration"
authors = ["Teo Zosa <erinzosa@ucla.com>"]
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/TeoZosa/structlog-sentry-logger"
homepage = "https://github.com/TeoZosa/structlog-sentry-logger"
include = ["structlog_sentry_logger/py.typed"]
keywords = ["logging", "structured", "structure", "log", "structured logging", "sentry", "structlog", "structlog-sentry"]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[tool.poetry.build]
script = "build.py"
generate-setup-file = true

[tool.poetry.urls]
Changelog = "https://github.com/TeoZosa/structlog-sentry-logger/releases"

[tool.poetry.dependencies]
python = "^3.7,<3.12"

# Project-Specific
colorama = { version = "^0.4.3", markers = "platform_system == 'Windows'" }
gitpython = "^3.1.7"
orjson = "^3.6.4"
python-dotenv = ">=0.19"
rich = ">=10.12,<14.0"
sentry-sdk = { version = ">0.17.0", optional = true }
structlog = ">=21.1,<23.0"

[tool.poetry.extras]
sentry = ["sentry-sdk"]

[tool.poetry.dev-dependencies]
# Standardized Developer Workflow Orchestration
cruft = "^2.12.0" # Automated Cookiecutter template synchronization

# Type Checking and Data Validation
mypy = "^1.0" # Static type checker (includes Mypyc Python module to C-Extension compiler, enabled by standard Python type annotations)

# Testing
pytest = "^7.2.1"
pytest-benchmark = {extras = ["histogram"], version = "^4.0.0"}
pytest-cov = "^4.0.0"
pytest-emoji = "^0.2.0"
pytest-forked = "^1.6.0"
pytest-mock = "^3.10.0"
pytest-sugar = "^0.9.6"
pytest-xdist = "^3.2.0"
mutmut = "^2.4.3"
xdoctest = {extras = ["all"], version = "^1.1.1"}
tox = "^3.28.0"
tox-wheel = "^1.0.0"

# Linting
## Code formatting
black = "^23.1" # see: https://black.readthedocs.io/en/stable/editor_integration.html
## Automation and management
pre-commit = "^2.21.0"

# CI/CD
tox-gh-actions = "^2.12.0"

# Documentation
darglint = "^1.5.8"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
emoji = ">=1.6.1,<3.0.0"
importlib-metadata = ">=3.4.0"
myst-parser = ">=0.15,<0.19"
pygments = "^2.9.0"
sphinx = ">=4.1.2,<6.0.0"
sphinx-autoapi = "^1.8.1"
sphinx-rtd-theme = ">=0.5.1,<1.1.0"
types-emoji = ">=1.2.4,<3.0.0" # PEP 561 compliant stub packages for mypy

#################################################################################
# Tooling configs                                                               #
#################################################################################
[tool.black]
line-length = 120

[tool.coverage.run]
branch = true
concurrency = ["multiprocessing"]
parallel = true
source = ["structlog_sentry_logger"]

[tool.coverage.report]
exclude_lines =[
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
fail_under = 100
omit =[
    "structlog_sentry_logger/structlog_sentry.py",
]
show_missing = true
skip_covered = true

[tool.cruft]
skip = [
    ".env",
    ".python-version",
    "structlog_sentry_logger/__init__.py",
    "docs/source/.env",
]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
fail-under = 0 # adjust `fail-under` value as quality standards permit
whitelist-regex = []
color = true

[tool.mypy]
disallow_untyped_defs = true
files = "**/*.py"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_context = true
show_error_codes = true

[tool.pytest.ini_options]
addopts = ["-rfsxX", "-l", "--tb=short", "--strict-markers", "-vv", "--emoji", "--xdoctest"]
xfail_strict = true
testpaths = ["tests",]
norecursedirs = [".*", "*.egg", "build", "dist",]

[tool.ruff]
line-length = 120

select = [
    "F", # Pyflakes
    "E", "W", # pycodestyle
    "C90", # McCabe
    "I", # isort
    "D", # pydocstyle
    "UP", # pyupgrade
    "PLC", "PLE", "PLR", "PLW", # Pylint
]


ignore = [
    # pycodestyle:
    "E501", # Line too long (covered by Black)
]

fix = true

# Group violations by containing file.
format = "grouped"

# By default, always show source code snippets.
show-source = true

# Assume Python 3.7
# Note: helps prevent breaking autofixes from, e.g., pyupgrade
target-version = "py37"

[tool.ruff.isort]
# Note: Ruff implicitly uses `profile = "black"`
combine-as-imports = true

[tool.ruff.mccabe]
## cyclomatic complexity (https://github.com/PyCQA/mccabe)
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"

[build-system]
requires = ["poetry-core>=1.0.0", "mypy>=0.910,<1.0.0", "setuptools>=58.1.0", "orjson>=3.6.4"]
build-backend = "poetry.core.masonry.api"
