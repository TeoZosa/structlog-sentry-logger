#################################################################################
# backend build system; e.g., can use poetry, setuptools.
# ex.   #https://snarky.ca/what-the-heck-is-pyproject-toml/
#       #[build-system]
#       #requires = ["setuptools >= 40.6.0", "wheel"]
#       #build-backend = "setuptools.build_meta"
#################################################################################
[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

#################################################################################
# Poetry configs                                                                #
#################################################################################
# Metadata
[tool.poetry]
name = "structlog-sentry-logger"
version = "0.5.6"
description = "Log without the setup via a pre-configured structlog logger with optional Sentry integration"
authors = ["Teo Zosa <teo@sonosim.com>"]
readme = "README.md"
repository = "https://github.com/TeoZosa/structlog-sentry-logger"
homepage = "https://github.com/TeoZosa/structlog-sentry-logger"
keywords = ["logging", "structured", "structure", "log", "structured logging", "sentry", "structlog", "structlog-sentry"]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# requirements.txt replacement
#   Note: to import requirements.txt, use:
#       `cat requirements.txt |  sed 's/#.*//g' | tr -s '\n' | sed '/-e.*/d' | perl -pe 's/([<=>]+)/:$1/' | xargs -t -n 1 -I {} poetry add '{}'`
[tool.poetry.dependencies]
python = "^3.6.1"
colorama = "^0.4.3"
gitpython = "^3.1.7"
orjson = "^3.4.0"
python-dotenv = "^0.15.0"
sentry-sdk = ">0.17.0"
structlog = "^20.1.0"
structlog-sentry = "^1.2.2"

[tool.poetry.dev-dependencies]
# Testing
pytest = "^6.0.1"
pytest-cov = "^2.10.1"
pytest-emoji = "^0.2.0"
pytest-mock = "^3.3.1"
pytest-sugar = "^0.9.4"
pytest-xdist = "^2.1.0"
tox = "^3.20.0"
tox-gh-actions = "^2.2.0"
# Code formatter
# see: https://black.readthedocs.io/en/stable/editor_integration.html
black = "^20.8b1"
# Linters
flakehell = "^0.7.1"
pylint = "^2.6.0"
# Static type checker
mypy = "^0.790"
# Linting & formatting orchestrator
pre-commit = "^2.9.3"

#################################################################################
# Tooling configs                                                               #
#################################################################################
[tool.flakehell]
# specify any flake8 options
exclude = [".*"] # Ignore dotfiles
# make output nice
format = "grouped"
# show line of source code in output
show_source = true

# list of plugins and rules for them
[tool.flakehell.plugins]
# cyclomatic complexity (https://github.com/PyCQA/mccabe)
mccabe = ["+*"]
# include everything in pyflakes except F401
pyflakes = ["+*", "-F401"]
# include everything in pycodestyle except what Black covers
pycodestyle = ["+*",
    "-E203", # Whitespace before ':'
    "-E501", # Line too long (82 > 78 characters)
    "-W503"  # Line break occurred before a binary operator <- this is now considered best practice by PEP 8
]

[tool.isort]
profile = "black"
atomic = "true"
combine_as_imports = true

[tool.pylint.basic]
good-names-rgxs = ["^Test_.*$", "^.*DSN.*$"]

[tool.pylint.messages_control]
disable = [
  # Explicitly document only as needed
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  # Black & Flake8 purview
  "line-too-long",
  "bad-continuation",
  "c-extension-no-member",
]

[tool.pylint.similarities]
# Ignore imports when computing similarities.
ignore-imports = "yes"

[tool.pytest.ini_options]
addopts = ["-rfsxX", "-l", "--tb=short", "--strict", "-vv", "--emoji",]
xfail_strict = "true"
testpaths = ["tests",]
norecursedirs = [".*", "*.egg", "build", "dist",]
