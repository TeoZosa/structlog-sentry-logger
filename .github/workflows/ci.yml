---
name: CI

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - main  # forward-compatibility with new GitHub default branch naming
      - master  # backward-compatibility with old GitHub default branch naming
  pull_request:
    branches:
      - main  # forward-compatibility with new GitHub default branch naming
      - master  # backward-compatibility with old GitHub default branch naming
  workflow_dispatch:

jobs:

  # Quality jobs ----------------------
  code-quality:
    strategy:
      matrix:
        python-version: ["3.9"]

    name: Code Quality
    runs-on: "ubuntu-latest"
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3

      - name: Set up Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry config --list

      - name: Load cached venv(s) (if they exist)
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .venv
            .tox
          # yamllint disable-line rule:line-length
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Tox
        run: |
          pip install --constraint=.github/workflows/constraints.txt tox
          tox --version

      - name: Install Go for pre-commit hook (shfmt)
        run: |
          GO_TAR=go1.16.linux-amd64.tar.gz && \
          wget --quiet https://golang.org/dl/$GO_TAR && \
          sudo tar -C /usr/local -xzf $GO_TAR && \
          rm $GO_TAR && \
          export GO111MODULE=on && \
          export CGO_ENABLED=0 && \
          export GOOS=linux && \
          export GOARCH=amd64 && \
          export PATH="${PATH}:/usr/local/go/bin"

      - name: Run static analysis
        run: |
          make pre-commit
        env:
          SKIP: cruft

  # Security jobs ----------------------
  dependency-security-vulnerability-analysis:
    strategy:
      matrix:
        python-version: ["3.9"]

    name: Dependency Security Vulnerability Analysis
    runs-on: "ubuntu-latest"
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3

      - name: Set up Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry config --list

      - name: Load cached venv(s) (if they exist)
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .venv
            .tox
          # yamllint disable-line rule:line-length
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Tox
        run: |
          pip install --constraint=.github/workflows/constraints.txt tox
          tox --version

      - name: Run dependency security vulnerability analysis
        run: |
          make scan-dependencies

  # Code quality AND security job ----------------------
  semgrep:
    runs-on: ubuntu-latest
    name: Semgrep
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3

      - name: Disable Git LFS
        run: |
          rm .git/hooks/post-checkout || true

      - name: Run Semgrep
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: r/python

  # Tests jobs ------------------------
  test:
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        python-version: ["3.7", "3.8", "3.9"]

    name: Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}

    env:
      USING_COVERAGE_OS: "ubuntu"
      USING_COVERAGE_PY_VER: "3.9"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3

      - name: Set up Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry config --list

      - name: Load cached venv(s) (if they exist)
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .venv
            .tox
          # yamllint disable-line rule:line-length
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Tox & Tox GH Actions Plugin
        # yamllint disable rule:line-length
        run: |
          pip install --constraint=.github/workflows/constraints.txt tox tox-gh-actions
          tox --version
        # yamllint enable rule:line-length

      - name: Run tox targets for ${{ matrix.python-version }}
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          shell: bash
          command: |
            git fetch origin master:refs/remotes/origin/master
            make test

      - name: Upload coverage to Codecov
        if: "contains(matrix.os, env.USING_COVERAGE_OS) &&
             contains(matrix.python-version, env.USING_COVERAGE_PY_VER)"
        uses: "codecov/codecov-action@v2.1.0"
        with:
          file: ./.tox/coverage.xml
          fail_ci_if_error: true

  # Performance testing jobs ------------------------
  test-performance:
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        python-version: ["3.7", "3.8", "3.9"]
        library-type: ["pure_python", "c_library"]

    # yamllint disable-line rule:line-length
    name: Performance testing for Python ${{ matrix.python-version }} (${{ matrix.os }}) [${{ matrix.library-type }}]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3

      - name: Set up Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry config --list

      - name: Load cached venv(s) (if they exist)
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .venv
            .tox
          # yamllint disable-line rule:line-length
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Tox
        run: |
          pip install --constraint=.github/workflows/constraints.txt tox
          tox --version

      - name: Run benchmarks for ${{ matrix.python-version }}
        id: performance-testing
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          shell: bash
          # yamllint disable rule:line-length
          command: |
            TOX_COMPATIBLE_VERSION=$(\
              echo ${{ matrix.python-version }} \
              | tr -d '.')
            envname="py${TOX_COMPATIBLE_VERSION}-benchmark-${{ matrix.library-type }}" && \
            make "test-${envname}"
          # yamllint enable rule:line-length

  # Mutation testing jobs ------------------------
  test-mutations:
    strategy:
      matrix:
        python-version: ["3.9"]

    name: Mutation testing
    runs-on: "ubuntu-latest"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3
        with:
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry config --list

      - name: Load cached venv(s) (if they exist)
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: |
            .venv
            .tox
          # yamllint disable-line rule:line-length
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Tox
        run: |
          pip install --constraint=.github/workflows/constraints.txt tox
          tox --version

      - name: Run mutation testing
        run: |
          make test-mutations
