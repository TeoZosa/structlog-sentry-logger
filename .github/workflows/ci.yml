---
name: CI

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - main  # forward-compatibility with new GitHub default branch naming
      - master  # backward-compatibility with old GitHub default branch naming
  pull_request:
    branches:
      - main  # forward-compatibility with new GitHub default branch naming
      - master  # backward-compatibility with old GitHub default branch naming
  workflow_dispatch:

jobs:

  # Quality jobs ----------------------

  code-quality:
    name: Code Quality
    runs-on: "ubuntu-latest"
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3

      - name: Set up Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: "3.9"

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry config --list

      - name: Install dependencies
        run: |
          make provision-environment

      - name: Install Go for pre-commit hook (shfmt)
        run: |
          GO_TAR=go1.16.linux-amd64.tar.gz && \
          wget --quiet https://golang.org/dl/$GO_TAR && \
          sudo tar -C /usr/local -xzf $GO_TAR && \
          rm $GO_TAR && \
          export GO111MODULE=on && \
          export CGO_ENABLED=0 && \
          export GOOS=linux && \
          export GOARCH=amd64 && \
          export PATH="${PATH}:/usr/local/go/bin"

      - name: Run static analysis
        run: |
          make pre-commit
        env:
          SKIP: cruft

  # Security jobs ----------------------

  dependency-security-vulnerability-analysis:
    name: Dependency Security Vulnerability Analysis
    runs-on: "ubuntu-latest"
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3

      - name: Set up Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: "3.9"

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry config --list

      - name: Install dependencies
        run: |
          make provision-environment

      - name: Run dependency security vulnerability analysis
        run: |
          make scan-dependencies

  # Code quality AND security job ----------------------

  semgrep:
    runs-on: ubuntu-latest
    name: Semgrep
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3

      - name: Disable Git LFS
        run: |
          rm .git/hooks/post-checkout || true

      - name: Run Semgrep
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: r/python

  # Tests jobs ------------------------

  test:
    name: Python ${{ matrix.python-version }}
    runs-on: "ubuntu-latest"
    env:
      USING_COVERAGE: "3.9"

    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9"]

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3

      - name: Set up Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry config --list

      - name: Install dependencies
        run: |
          make provision-environment

      - name: Run tox targets for ${{ matrix.python-version }}
        run: |
          git fetch origin master:refs/remotes/origin/master
          make test

      - name: Upload coverage to Codecov
        if: "contains(env.USING_COVERAGE, matrix.python-version)"
        uses: "codecov/codecov-action@v1"
        with:
          file: ./.tox/coverage.xml
          fail_ci_if_error: false

  test-mutations:
    name: Mutation testing
    runs-on: "ubuntu-latest"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3
        with:
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: "3.9"

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry config --list

      - name: Install dependencies
        run: |
          make provision-environment

      - name: Run mutation testing
        run: |
          make test-mutations

  # Install Verification ----------------------

  verify-user-install:
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]

    name: Verify package install as user
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3

      - name: Set up Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: "3.9"

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      - name: Check Release workflow status
        id: release-workflow-status
        run: |
          RELEASE_WORKFLOW_STATUS=null
          until [ "${RELEASE_WORKFLOW_STATUS}" != null ]; do
            echo "Release workflow status unavailable; retrying"
            sleep 10
            RELEASE_WORKFLOW_STATUS=$( \
              curl -sSL -X GET -G \
                -H "Accept: application/vnd.github.v3+json" \
                -d "branch=${GITHUB_REF_NAME_SLUG}" \
                -d "event=push" \
                "${WORKFLOW_API_ENDPOINT}" \
              | jq -r '.workflow_runs[0].conclusion' \
              )
          done
          echo "::set-output name=status::${RELEASE_WORKFLOW_STATUS}"
        env:
          # yamllint disable-line rule:line-length
          WORKFLOW_API_ENDPOINT: https://api.github.com/repos/${{ github.repository }}/actions/workflows/release.yml/runs
        shell: bash

      - name: Abort if Release workflow not successful
        if: "steps.release-workflow-status.outputs.status != 'success'"
        run: |
          echo "ERROR:"
          echo "Release Workflow status: \
            ${{ steps.release-workflow-status.outputs.status }}"
          exit 1

      - name: Install package
        run: |
          pip install structlog-sentry-logger \
            --no-deps --index-url https://test.pypi.org/simple/
          pip install structlog-sentry-logger \
            --upgrade
          pip list -v
        shell: bash

      - name: Run example script with both logging configurations
        run: |
          echo "Default output (JSON)"
          python ./docs_src/pure_structlog_logging_without_sentry.py
          echo "dev-local output (formatted)"
          export CI_ENVIRONMENT_SLUG=dev-local
          python ./docs_src/pure_structlog_logging_without_sentry.py
        shell: bash
