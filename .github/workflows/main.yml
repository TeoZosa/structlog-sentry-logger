---
name: CI

on:  # yamllint disable-line rule:truthy
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:

jobs:

  # Quality jobs ----------------------

  static-analysis:
    name: Static Analysis
    runs-on: "ubuntu-latest"
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3

      - name: Set up Python
        uses: actions/setup-python@v2.1.4
        with:
          python-version: "3.9"

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry config --list

      - name: Install dependencies
        run: |
          make provision_environment

      - name: Install Go for pre-commit hook (shfmt)
        run: >
          GO_TAR=go1.15.linux-amd64.tar.gz &&
          wget --quiet https://golang.org/dl/$GO_TAR &&
          sudo tar -C /usr/local -xzf $GO_TAR &&
          rm $GO_TAR &&
          export GO111MODULE=on &&
          export CGO_ENABLED=0 &&
          export GOOS=linux &&
          export GOARCH=amd64 &&
          export PATH="${PATH}:/usr/local/go/bin"

      - name: "Run static analysis"
        run: |
          make pre-commit

  dependency-security-vulnerability-analysis:
    name: Dependency Security Vulnerability Analysis
    runs-on: "ubuntu-latest"
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3

      - name: Set up Python
        uses: actions/setup-python@v2.1.4
        with:
          python-version: "3.9"

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry config --list

      - name: Install dependencies
        run: |
          make provision_environment

      - name: Run dependency security vulnerability analysis
        run: |
          make scan-dependencies

  # Tests jobs ------------------------

  test:
    name: "Python ${{ matrix.python-version }}"
    runs-on: "ubuntu-latest"
    env:
      USING_COVERAGE: "3.9"

    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9"]

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v2.1.4
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry config --list

      - name: Install dependencies
        run: |
          make provision_environment

      - name: "Run tox targets for ${{ matrix.python-version }}"
        run: |
          git fetch origin master:refs/remotes/origin/master
          make test

      - name: Upload coverage to Codecov
        if: "contains(env.USING_COVERAGE, matrix.python-version)"
        uses: "codecov/codecov-action@v1"
        with:
          file: ./.tox/coverage.xml
          fail_ci_if_error: true

  # Install Verification ----------------------

  verify-user-install:
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]

    name: Verify package install as user
    runs-on: "${{ matrix.os }}"

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3

      - name: Set up Python
        uses: actions/setup-python@v2.1.4
        with:
          python-version: "3.9"

      - name: Install package
        run: |
          pip install structlog-sentry-logger \
             --no-deps --index-url https://test.pypi.org/simple/
          pip install --upgrade structlog-sentry-logger
          pip list -v
        shell: bash

      - name: Run example script with both logging configurations
        run: |
          echo "Default output (JSON)"
          python ./docs_src/pure_structlog_logging_without_sentry.py
          echo "dev-local output (formatted)"
          export CI_ENVIRONMENT_SLUG=dev-local
          python ./docs_src/pure_structlog_logging_without_sentry.py
        shell: bash
