---
name: Release

on:  # yamllint disable-line rule:truthy
  push:
    branches:
      - master
  workflow_dispatch:
  pull_request:

jobs:

  # Shared tag & version number info ----------------------
  get-tag-xor-dev-version:
    name: Get tags and version numbers
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.detect-new-version-tag.outputs.tag }}
      dev-version: ${{ steps.bump-dev-version.outputs.version }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "::set-output name=sha::$(git rev-parse --verify --quiet HEAD^)"

      - name: Detect new version tag
        id: detect-new-version-tag
        if: "steps.check-parent-commit.outputs.sha"
        run: |
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          git checkout HEAD~
          PARENT_COMMIT_VER=$(make get-project-version-number)
          git checkout "${BRANCH_NAME}"
          CURRENT_COMMIT_VER=$(make get-project-version-number)
          if [[ "${PARENT_COMMIT_VER}" != "${CURRENT_COMMIT_VER}" ]]; then
            echo "::set-output name=tag::${CURRENT_COMMIT_VER}"
          fi

      - name: Bump version for developmental release
        id: bump-dev-version
        if: "! steps.detect-new-version-tag.outputs.tag"
        run: |
          poetry version patch &&
          VERSION=$(make get-project-version-number) &&
          DEV_VERSION="${VERSION}.dev.$(date +%s)" &&
          poetry version "${DEV_VERSION}" &&
          echo "::set-output name=version::${DEV_VERSION}"

  # Package build ----------------------
  package-build:
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-2019", "macos-latest"]
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    name: Package build
    runs-on: ${{ matrix.os }}
    needs: get-tag-xor-dev-version
    outputs:
      is-test-package: ${{ steps.use-dev-version-for-testing.outputs.is_testing }}
      package-version: ${{ steps.log-package-version.outputs.version }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Install Tox
        run: |
          pip install --constraint=.github/workflows/constraints.txt tox
          tox --version

      - name: Load cached tox testenv(s) (if they exist)
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: |
            .tox
          key: tox-${{ github.workflow }}-${{ github.job }}-${{ runner.os }}-CPython${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      # Update the project version number to the dev version that was
      # generated upstream (only used in non-release builds; else project
      # already set to the correct version number)
      - name: Use dev project version for testing
        id: use-dev-version-for-testing
        if: "needs.get-tag-xor-dev-version.outputs.dev-version"
        run: |
          VERSION="${{ needs.get-tag-xor-dev-version.outputs.dev-version }}"
          poetry version "${VERSION}"
          echo "::set-output name=is_testing::true"
        shell: bash

      - name: Log package version
        id: log-package-version
        run: |
          VERSION=$(make get-project-version-number)
          echo "::set-output name=version::${VERSION}"
        shell: bash

      - name: Build package
        run: |
          make package

      - name: Store the binary wheel
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist

  # PyPI/TestPyPI package upload ----------------------
  pypi-packages-upload:
    name: PyPI/TestPyPI package upload
    runs-on: ubuntu-latest
    needs: package-build
    outputs:
      package-version: ${{ needs.package-build.outputs.package-version }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Download the binary wheels
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist

      - name: Publish packages on PyPI
        if: "! needs.package-build.outputs.is-test-package"
        uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}  # pragma: allowlist secret

      - name: Publish packages on TestPyPI
        if: "needs.package-build.outputs.is-test-package"
        uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_TOKEN }}  # pragma: allowlist secret
          repository_url: https://test.pypi.org/legacy/

  # Install Verification ----------------------
  verify-user-install:
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    name: Verify package install as user
    runs-on: ${{ matrix.os }}
    needs: pypi-packages-upload

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package-under-test
        run: |
          PYPI_PACKAGE="structlog-sentry-logger==${PACKAGE_VERSION}"
          TEST_PYPI_PACKAGE="${PYPI_PACKAGE} --index-url https://test.pypi.org/simple/"
          function install_test_pypi() { pip install ${TEST_PYPI_PACKAGE} --no-deps && install_pypi; }
          function install_pypi() { pip install --upgrade ${PYPI_PACKAGE}; }

          until (install_test_pypi || install_pypi)
          do
             echo "Waiting for Python Package Index to serve current package-under-test: ${PYPI_PACKAGE}"
             sleep 10
          done
          pip list -v
        env:
          PACKAGE_VERSION: ${{ needs.pypi-packages-upload.outputs.package-version }}
        shell: bash

      - name: Run example script with both logging configurations
        run: |
          echo "Default output (JSON)"
          python ./docs_src/pure_structlog_logging_without_sentry.py
          echo "Cloud Logging compatibility mode (JSON)"
          export STRUCTLOG_SENTRY_LOGGER_CLOUD_LOGGING_COMPATIBILITY_MODE_ON=
          python ./docs_src/pure_structlog_logging_without_sentry.py
          echo "Local development mode output (formatted) \
            (with Cloud Logging compatibility mode still activated)"
          export STRUCTLOG_SENTRY_LOGGER_LOCAL_DEVELOPMENT_LOGGING_MODE_ON=
          python ./docs_src/pure_structlog_logging_without_sentry.py
        shell: bash

  # Release notes publication ----------------------
  publish-release-notes:
    name: Publish release notes
    runs-on: ubuntu-latest
    needs:
      - get-tag-xor-dev-version
      - verify-user-install
    permissions:
      pull-requests: write
      contents: write

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Publish the release notes
        uses: release-drafter/release-drafter@v5.20.0
        with:
          publish: ${{ needs.get-tag-xor-dev-version.outputs.tag != '' }}
          # Annotated tag to associate with the current commit
          tag: ${{ needs.get-tag-xor-dev-version.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
